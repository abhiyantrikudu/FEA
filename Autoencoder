import tensorflow as tf
from tensorflow.keras.layers import Input, Conv3D, MaxPooling3D, Flatten, Dense, Reshape
from tensorflow.keras.models import Model

# Define the input shape (x, y, z, c)
input_shape = (x, y, z, c)

# encoder
encoder_input = Input(shape=input_shape)
x = Conv3D(64, (3, 3, 3), activation='relu')(encoder_input)
x = MaxPooling3D((2, 2, 2))(x)
x = Conv3D(128, (3, 3, 3), activation='relu')(x)
x = MaxPooling3D((2, 2, 2))(x)
x = Conv3D(256, (3, 3, 3), activation='relu')(x)
x = Flatten()(x)
encoded = Dense(latent_dim)(x)  

encoder = Model(encoder_input, encoded)

# decoder
decoder_input = Input(shape=(latent_dim,))
x = Dense(256, activation='relu')(decoder_input)
x = Dense(128, activation='relu')(x)
x = Dense(64, activation='relu')(x)
x = Dense(np.prod(input_shape), activation='sigmoid')(x)
decoded = Reshape(input_shape)(x)

decoder = Model(decoder_input, decoded)


v = Model(encoder_input, decoder(encoder(encoder_input)))


v.compile(optimizer='adam', loss='mean_squared_error')  # Use 'mean_squared_error' for mesh generation


v.fit(training_data, training_data, epochs=epochs, batch_size=batch_size)


encoded_representation = encoder.predict(input_mesh)
generated_mesh = decoder.predict(encoded_representation)

from stl import mesh
stl_mesh = mesh.Mesh(generated_mesh)
stl_mesh.save('generated_mesh.stl')
